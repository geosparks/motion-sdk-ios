// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MotionSDK
import AWSCore
import AWSIoT
import AWSMobileClientXCF
import CommonCrypto
import CoreData
import CoreLocation
import CoreMotion
import CoreTelephony
import Foundation
@_exported import MotionSDK
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import _Concurrency
@_hasMissingDesignatedInitializers @objc public class MotionTrip : ObjectiveC.NSObject {
  @objc public var tripId: Swift.String!
  @objc public var deleted: Swift.Bool
  @objc public var ended: Swift.Bool
  @objc public var started: Swift.Bool
  @objc public var paused: Swift.Bool
  @objc public var updatedAt: Swift.String!
  @objc public var createdAt: Swift.String!
  @objc public var syncStatus: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionCreateTrip : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var destinations: [MotionSDK.MotionTripDestination]!
  @objc public var tripId: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var isEnded: Swift.Bool
  @objc public var isStarted: Swift.Bool
  @objc public var origins: [MotionSDK.MotionTripOrigin]!
  @objc public var tripTrackingUrl: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc public var userId: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionTripEvent : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var eventType: Swift.String!
  @objc public var id: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var userId: Swift.String!
  @objc public var userLocationId: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionUser : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String
  @objc final public let userDescription: Swift.String?
  @objc public var geofenceEvents: Swift.Bool
  @objc public var eventsListener: Swift.Bool
  @objc public var locationListener: Swift.Bool
  @objc public var locationEvents: Swift.Bool
  @objc public var tripsEvents: Swift.Bool
  @objc public var nearbyEvents: Swift.Bool
  @objc deinit
}
@objc public protocol MotionDelegate {
  @objc func didUpdateLocation(_ location: MotionSDK.MotionLocation)
  @objc func didReceiveEvents(_ events: MotionSDK.MotionEvents)
  @objc func didReceiveUserLocation(_ location: MotionSDK.MotionLocationReceived)
  @objc func didReceiveTripStatus(_ tripStatus: MotionSDK.TripStatusListener)
  @objc func onError(_ error: MotionSDK.MotionError)
}
@_inheritsConvenienceInitializers @objc public class Motion : ObjectiveC.NSObject {
  @objc public static var delegate: MotionSDK.MotionDelegate! {
    @objc get
    @objc set
  }
  @objc public static func initialize(_ publishKey: Swift.String, _ baseUrl: Swift.String? = nil, _ iOTEndPoint: Swift.String? = nil, _ region: AWSCore.AWSRegionType = .Unknown)
  @objc public static func createUser(_ description: Swift.String, handler: MotionSDK.MotionUserCompletionhandler? = nil)
  @objc public static func getUser(_ userId: Swift.String, handler: MotionSDK.MotionUserCompletionhandler? = nil)
  @objc public static func setDescription(_ description: Swift.String)
  @objc public static func logoutUser(handler: MotionSDK.MotionLogoutCompletionhandler? = nil)
  @objc public static func setDeviceToken(_ deviceToken: Foundation.Data)
  @objc public static func startTracking(_ trackingMethod: MotionSDK.MotionTrackingMode, options: MotionSDK.MotionTrackingCustomMethods? = nil)
  @objc public static func stopTracking()
  @objc public static func requestLocation()
  @objc public static func isLocationEnabled() -> Swift.Bool
  @objc public static func isLocationTracking() -> Swift.Bool
  @objc public static func locationPermissionStatus() -> Swift.Int
  @objc public static func getCurrentLocation(_ accuracy: Swift.Int, handler: MotionSDK.MotionCurrentLocationCompletionhandler? = nil)
  @objc public static func updateCurrentLocation(_ accuracy: Swift.Int)
  @objc public static func startTrip(_ tripId: Swift.String, _ tripDesc: Swift.String? = nil, handler: MotionSDK.MotionTripCompletionhandler? = nil)
  @objc public static func stopTrip(_ tripId: Swift.String, handler: MotionSDK.MotionTripCompletionhandler? = nil)
  @objc public static func pauseTrip(_ tripId: Swift.String, handler: MotionSDK.MotionTripCompletionhandler? = nil)
  @objc public static func resumeTrip(_ tripId: Swift.String, handler: MotionSDK.MotionTripCompletionhandler? = nil)
  @objc public static func forceEndTrip(_ tripId: Swift.String, handler: MotionSDK.MotionTripCompletionhandler? = nil)
  @objc public static func activeTrips(_ local: Swift.Bool, handler: MotionSDK.MotionActiveTripsCompletionhandler? = nil)
  @objc public static func deleteTrip(_ tripId: Swift.String, handler: MotionSDK.MotionTripCompletionhandler? = nil)
  @objc public static func syncTrip(_ tripId: Swift.String, handler: MotionSDK.MotionTripCompletionhandler? = nil)
  @objc public static func createTrip(_ local: Swift.Bool, _ coordinate: Swift.Dictionary<Swift.String, Any>? = nil, handler: MotionSDK.MotionCreateTripCompletionhandler? = nil)
  @objc public static func getTripDetails(_ tripId: Swift.String, handler: MotionSDK.MotionGetTripCompletionhandler? = nil)
  @objc public static func getTripSummary(_ tripId: Swift.String, handler: MotionSDK.MotionSummaryTripCompletionhandler? = nil)
  @objc public static func getTripStatus(_ tripId: Swift.String, handler: MotionSDK.MotionTripListenerCompletionhandler? = nil)
  @objc public static func isTripSynced(_ tripId: Swift.String, handler: MotionSDK.MotionTripSyncStatusCompletionhandler? = nil)
  @objc public static func toggleEvents(Geofence: Swift.Bool, Trip: Swift.Bool, Location: Swift.Bool, MovingGeofence: Swift.Bool, handler: MotionSDK.MotionUserCompletionhandler? = nil)
  @objc public static func toggleListener(Events: Swift.Bool, Locations: Swift.Bool, handler: MotionSDK.MotionUserCompletionhandler? = nil)
  @objc public static func getEventsStatus(handler: MotionSDK.MotionUserCompletionhandler? = nil)
  @objc public static func getListenerStatus(handler: MotionSDK.MotionUserCompletionhandler? = nil)
  @objc public static func notificationOpenedHandler(_ resposne: UserNotifications.UNNotificationResponse)
  @objc public static func setLoggerEnabled(logger: Swift.Bool)
  @objc public static func subscribeEvents()
  @objc public static func unsubscribeEvents()
  @objc public static func subscribeLocation()
  @objc public static func unsubscribeLocation()
  @objc public static func subscribeUserLocation(_ userId: Swift.String)
  @objc public static func unsubscribeUserLocation(_ userId: Swift.String)
  @objc public static func subscribeTripStatus(_ tripId: Swift.String)
  @objc public static func unsubscribeTripStatus(_ tripId: Swift.String)
  @objc public static func enableAccuracyEngine()
  @objc public static func disableAccuracyEngine()
  @objc public static func enableAccuracyEngine(_ accuracy: Swift.Int)
  @objc public static func enablePublishing(_ publish: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionTripDestination : ObjectiveC.NSObject {
  @objc public var coordinates: [Swift.Double]!
  @objc public var createdAt: Swift.String!
  @objc public var id: Swift.String!
  @objc public var locType: Swift.String!
  @objc public var reached: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionError : ObjectiveC.NSObject {
  @objc final public let code: Swift.String?
  @objc final public let message: Swift.String?
  @objc deinit
}
public enum LocationAccuracy {
  case kCLLocationAccuracyBestForNavigation
  case kCLLocationAccuracyBest
  case kCLLocationAccuracyNearestTenMeters
  case kCLLocationAccuracyHundredMeters
  case kCLLocationAccuracyKilometer
  case kCLLocationAccuracyThreeKilometers
  public static func == (a: MotionSDK.LocationAccuracy, b: MotionSDK.LocationAccuracy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MotionTrackingCustomMethods : ObjectiveC.NSObject {
  public static let sharedInstance: MotionSDK.MotionTrackingCustomMethods
  public var desiredAccuracy: MotionSDK.LocationAccuracy?
  public var useVisits: Swift.Bool?
  public var showsBackgroundLocationIndicator: Swift.Bool?
  public var distanceFilter: CoreLocation.CLLocationDistance?
  public var useSignificant: Swift.Bool?
  public var useRegionMonitoring: Swift.Bool?
  public var useDynamicGeofencRadius: Swift.Bool?
  public var geofenceRadius: Swift.Int?
  public var allowBackgroundLocationUpdates: Swift.Bool?
  public var activityType: CoreLocation.CLActivityType?
  public var pausesLocationUpdatesAutomatically: Swift.Bool?
  public var useStandardLocationServices: Swift.Bool?
  public var accuracyFilter: Swift.Int?
  public var updateInterval: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionEvents : ObjectiveC.NSObject {
  @objc public var activity: Swift.String?
  @objc public var altitude: Foundation.NSNumber
  @objc public var course: Foundation.NSNumber
  @objc public var createdAt: Swift.String?
  @objc public var distance: Foundation.NSNumber
  @objc public var eventSource: Swift.String?
  @objc public var eventType: Swift.String?
  @objc public var eventVersion: Swift.String?
  @objc public var geofenceId: Swift.String?
  @objc public var horizontalAccuracy: Foundation.NSNumber
  @objc public var coordinates: [Swift.Double]?
  @objc public var locationId: Swift.String?
  @objc public var nearbyUserId: Swift.String?
  @objc public var recordedAt: Swift.String?
  @objc public var speed: Foundation.NSNumber
  @objc public var tripId: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var veritcalAccuracy: Foundation.NSNumber
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionLocationReceived : ObjectiveC.NSObject {
  @objc public var activity: Swift.String!
  @objc public var altitude: Foundation.NSNumber!
  @objc public var latitude: Foundation.NSNumber!
  @objc public var longitude: Foundation.NSNumber!
  @objc public var course: Foundation.NSNumber!
  @objc public var eventSource: Swift.String!
  @objc public var eventType: Swift.String!
  @objc public var eventVersion: Swift.String!
  @objc public var horizontalAccuracy: Foundation.NSNumber!
  @objc public var locationId: Swift.String!
  @objc public var recordedAt: Swift.String!
  @objc public var speed: Foundation.NSNumber!
  @objc public var userId: Swift.String!
  @objc public var verticalAccuracy: Foundation.NSNumber!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionTripSummary : ObjectiveC.NSObject {
  @objc public var distanceCovered: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var projectId: Swift.String!
  @objc public var route: [MotionSDK.MotionTripSummaryRoute]!
  @objc public var tripId: Swift.String!
  @objc public var tripStatus: Swift.String!
  @objc public var userId: Swift.String!
  @objc public var syncStatus: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionTripOrigin : ObjectiveC.NSObject {
  @objc public var coordinates: [Swift.Double]!
  @objc public var createdAt: Swift.String!
  @objc public var id: Swift.String!
  @objc public var locType: Swift.String!
  @objc public var reached: Swift.Bool
  @objc public var tripId: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionLocation : ObjectiveC.NSObject {
  @objc final public let userId: Swift.String?
  @objc final public let activity: Swift.String?
  @objc final public let location: CoreLocation.CLLocation
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class TripStatusListener : ObjectiveC.NSObject {
  @objc final public let tripId: Swift.String
  @objc final public let speed: Swift.Double
  @objc final public let distance: Swift.Double
  @objc final public let duration: Swift.Double
  @objc final public let startedTime: Swift.String
  @objc final public let pace: Swift.Double
  @objc final public let latitude: Swift.Double
  @objc final public let longitude: Swift.Double
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (MotionSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (MotionSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: MotionSDK.Reachability.NetworkStatus, b: MotionSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case none
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: MotionSDK.Reachability.Connection, b: MotionSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: MotionSDK.Reachability.NetworkReachable?
  public var whenUnreachable: MotionSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: MotionSDK.Reachability.Connection {
    get
  }
  public var connection: MotionSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension MotionSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc public enum MotionTrackingMode : Swift.Int {
  case passive = 0
  case reactive
  case active
  case custom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Trip : Swift.Int {
  case Start
  case Pause
  case Resume
  case End
  case ForceEnd
  case Delete
  case Sync
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class MotionTripSummaryRoute : ObjectiveC.NSObject {
  @objc public var activity: Swift.String!
  @objc public var altitude: Foundation.NSNumber!
  @objc public var coordinates: [Swift.Double]!
  @objc public var recordedAt: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionGetTrip : ObjectiveC.NSObject {
  @objc public var createdAt: Swift.String!
  @objc public var destinations: [MotionSDK.MotionTripDestination]!
  @objc public var distanceCovered: Foundation.NSNumber
  @objc public var duration: Foundation.NSNumber
  @objc public var events: [MotionSDK.MotionTripEvent]!
  @objc public var tripId: Swift.String!
  @objc public var isDeleted: Swift.Bool
  @objc public var isEnded: Swift.Bool
  @objc public var isPaused: Swift.Bool
  @objc public var isStarted: Swift.Bool
  @objc public var origins: [MotionSDK.MotionTripOrigin]!
  @objc public var projectId: Swift.String!
  @objc public var tripEndedAt: Swift.String!
  @objc public var tripStartedAt: Swift.String!
  @objc public var updatedAt: Swift.String!
  @objc public var userId: Swift.String!
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MotionTripListener : ObjectiveC.NSObject {
  @objc final public let tripId: Swift.String
  @objc final public let speed: Swift.Double
  @objc final public let distance: Swift.Double
  @objc final public let duration: Swift.Double
  @objc final public let startedTime: Swift.String
  @objc deinit
}
public typealias MotionUserCompletionhandler = ((_ user: MotionSDK.MotionUser?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionLogoutCompletionhandler = ((_ status: Swift.String?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionCurrentLocationCompletionhandler = ((_ location: CoreLocation.CLLocation?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionTripCompletionhandler = ((_ status: Swift.String?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionActiveTripsCompletionhandler = ((_ trips: [MotionSDK.MotionTrip]?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionCreateTripCompletionhandler = ((_ trip: MotionSDK.MotionCreateTrip?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionGetTripCompletionhandler = ((_ trip: MotionSDK.MotionGetTrip?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionSummaryTripCompletionhandler = ((_ trip: MotionSDK.MotionTripSummary?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionTripListenerCompletionhandler = ((_ trip: MotionSDK.MotionTripListener?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionDeleteTripCompletionhandler = ((_ status: Swift.String?, _ error: MotionSDK.MotionError?) -> Swift.Void)
public typealias MotionTripSyncStatusCompletionhandler = ((_ status: Swift.Bool, _ error: MotionSDK.MotionError?) -> Swift.Void)
@_inheritsConvenienceInitializers @objc(HttpLocationData) public class HttpLocationData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MotionSDK.HttpLocationData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MotionSDK.HttpLocationData>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_stat: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bat_saver_mode: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var bat_stat: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var ended_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gps_stat: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var motion_stat: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var net_stat: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var started_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timezone_offset: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(MqttLocationData) public class MqttLocationData : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MotionSDK.MqttLocationData {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MotionSDK.MqttLocationData>
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_context: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var app_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_remaining: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_saver: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var battery_status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var course: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_manufacturer: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var device_model: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_listener: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var geofence_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var gps_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var horizontal_accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_listener: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_permission: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var nearby_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var network_status: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var os_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tracking_mode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trips_events: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tz_offset: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var vertical_accuracy: Swift.Double {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(MyTrip) public class MyTrip : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MotionSDK.MyTrip {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MotionSDK.MyTrip>
  @objc @NSManaged dynamic public var distance: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_count: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var locationId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var speed: Swift.Int16 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var start_time: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tripId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var update_time: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var route: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MotionSDK.MyTrip {
  @objc(addRouteObject:) @NSManaged dynamic public func addToRoute(_ value: MotionSDK.MyTripRoute)
  @objc(removeRouteObject:) @NSManaged dynamic public func removeFromRoute(_ value: MotionSDK.MyTripRoute)
  @objc(addRoute:) @NSManaged dynamic public func addToRoute(_ values: Foundation.NSSet)
  @objc(removeRoute:) @NSManaged dynamic public func removeFromRoute(_ values: Foundation.NSSet)
}
@_inheritsConvenienceInitializers @objc(MyTripRoute) public class MyTripRoute : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MotionSDK.MyTripRoute {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MotionSDK.MyTripRoute>
  @objc @NSManaged dynamic public var accuracy: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var activity: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var altitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var recorded_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tripId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip: MotionSDK.MyTrip? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(TripEventsLocal) public class TripEventsLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MotionSDK.TripEventsLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MotionSDK.TripEventsLocal>
  @objc @NSManaged dynamic public var created_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var entityId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_source: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var event_version: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip: MotionSDK.TripsLocal? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(TripsLocal) public class TripsLocal : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension MotionSDK.TripsLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<MotionSDK.TripsLocal>
  @objc @NSManaged dynamic public var created_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var distance_covered: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var duration: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_deleted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_ended: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_paused: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var is_started: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sync_status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var synced: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_ended_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var trip_started_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updated_at: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var user_id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var events: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension MotionSDK.TripsLocal {
  @objc(addEventsObject:) @NSManaged dynamic public func addToEvents(_ value: MotionSDK.TripEventsLocal)
  @objc(removeEventsObject:) @NSManaged dynamic public func removeFromEvents(_ value: MotionSDK.TripEventsLocal)
  @objc(addEvents:) @NSManaged dynamic public func addToEvents(_ values: Foundation.NSSet)
  @objc(removeEvents:) @NSManaged dynamic public func removeFromEvents(_ values: Foundation.NSSet)
}
extension MotionSDK.LocationAccuracy : Swift.Equatable {}
extension MotionSDK.LocationAccuracy : Swift.Hashable {}
@available(*, unavailable, renamed: "Connection")
extension MotionSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension MotionSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension MotionSDK.Reachability.Connection : Swift.Equatable {}
extension MotionSDK.Reachability.Connection : Swift.Hashable {}
extension MotionSDK.MotionTrackingMode : Swift.Equatable {}
extension MotionSDK.MotionTrackingMode : Swift.Hashable {}
extension MotionSDK.MotionTrackingMode : Swift.RawRepresentable {}
extension MotionSDK.Trip : Swift.Equatable {}
extension MotionSDK.Trip : Swift.Hashable {}
extension MotionSDK.Trip : Swift.RawRepresentable {}
